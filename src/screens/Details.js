import React from 'react';
import { connect } from 'react-redux';
import { StyleSheet, Text, TextInput, View } from 'react-native';
import actions from '../redux/actions';
import { createNewNote } from '../redux/reducers/notes';
import theme from '../theme';

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        width: '100%'
    },
    fieldTitle: {
        color: '#606060',
        fontSize: 10
    },
    fieldContainer: {
        paddingTop: 4,
        paddingLeft: 8,
        paddingRight: 8,
        paddingBottom: 4
    },
    contentContainer: {
        flexGrow: 1
    },
    infoContainer: {

    },
    textInput: {
        borderBottomWidth: 1,
        borderBottomColor: theme.fieldIdColor,
        fontSize: 14
    },
    infoText: {
        fontSize: 10,
        color: '#808080'
    }
});

class NoteDetails extends React.Component {
    static navigationOptions = {
        title:'Note Details',
        headerStyle: {
            marginTop: 20,
            backgroundColor: theme.headerBackgroundColor
        },
        headerTintColor: theme.headerForegroundColor
    };

    constructor(props) {
        super(props);
        const { params } = props.navigation.state;
        this.state = {
            note: props.notes.find(n => n.noteId === params.noteId) || createNewNote(params.noteId, '', '')
        }
    }

    onChangeField(text, field) {
        const note = this.state.note;
        note[field] = text;
        this.props.upsertNote(note);
        this.setState({ note: note });
    }

    render() {
        const createdDate = new Date(this.state.note.created || 0);
        const updatedDate = new Date(this.state.note.updated || 0);

        return (
            <View style={styles.container}>
                <View style={styles.fieldContainer}>
                    <Text style={styles.fieldTitle}>Title</Text>
                    <TextInput 
                        style={styles.textInput}
                        underlineColorAndroid="rgba(0,0,0,0)"
                        autoCapitalize="words"
                        onChangeText={text => this.onChangeField(text, 'title')}
                        placeholder="Note Title"
                        placeholderTextColor="#A0A0A0"
                        value={this.state.note.title} />
                </View>
                <View style={[styles.fieldContainer, styles.contentContainer]}>
                    <Text style={styles.fieldTitle}>Note Content</Text>
                    <TextInput 
                        style={styles.textInput}
                        underlineColorAndroid="rgba(0,0,0,0)"
                        autoCapitalize="sentences"
                        onChangeText={text => this.onChangeField(text, 'content')}
                        placeholder="Note Content"
                        placeholderTextColor="#A0A0A0"
                        multiline={true}
                        value={this.state.note.content} />
                </View>
                <View style={[styles.fieldContainer, styles.infoContainer]}>
                    <Text style={styles.infoText}>Created on server {createdDate.toString()}</Text>
                    <Text style={styles.infoText}>Updated on server {updatedDate.toString()}</Text>
                    <Text style={styles.infoText}>IsDeleted: {this.state.note.isDeleted ? 'true' : 'false'}</Text>
                    <Text style={styles.infoText}>IsDirty: {this.state.note.isDirty ? 'true' : 'false'}</Text>
                </View>
            </View>
        );
    }
}

/**
 * Maps the redux store state to properties required by this container
 * component.  In this case, we only want to see the records that are
 * not deleted.
 * 
 * @param {Object} state the redux store state
 */
const mapStateToProps = (state) => {
    return {
        notes: state.notes
    };
};

/**
 * Maps the dispatch method to dispatch the appropriate actions based
 * on the events that will be generated by this container component.
 * 
 * @param {Function} dispatch the dispatcher from redux
 */
const mapDispatchToProps = (dispatch) => {
    return {
        upsertNote: (note) => dispatch(actions.notes.upsertNote(note))
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(NoteDetails);
